# Build stage - Use a Python image with uv pre-installed
FROM mirror.gcr.io/astral/uv:0.8-python3.13-bookworm-slim AS builder

# Install the project into `/app`
WORKDIR /app

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev --no-editable

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
COPY . /app

RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev --no-editable


# # Production stage - Use minimal Python image
# FROM python:alpine

# WORKDIR /app

# # Create app user
# RUN addgroup -g 1000 app && adduser -u 1000 -G app -s /bin/sh -D app

# COPY --from=builder --chown=app:app /app/.venv /app/.venv

# # Place executables in the environment at the front of the path
# ENV PATH="/app/.venv/bin:$PATH"

# # Change user
# USER app

# # Run the MCP server by default
# ENTRYPOINT [ "tinyurl-mcp-server" ]
